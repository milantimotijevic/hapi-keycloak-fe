'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KeycloakConfig = require('keycloak-connect/middleware/auth-utils/config');
var GrantManager = require('keycloak-connect/middleware/auth-utils/grant-manager');
var Token = require('keycloak-connect/middleware/auth-utils/token');
var Grant = require('keycloak-connect/middleware/auth-utils/grant');
var UUID = require('keycloak-connect/uuid');
var Boom = require('boom');
var _ = require('lodash');
var pkg = require('../package.json');
var crypto = require('crypto');
var urljoin = require('url-join');

var getProtocol = function getProtocol(request) {
    return request.headers['x-forwarded-proto'] || request.server.info.protocol;
};
var getHost = function getHost(request) {
    return request.headers['x-forwarded-host'] || request.info.host;
};

var throwError = function throwError(message) {
    throw new Error(message);
};

var tokenRules = {
    exists: function exists(token) {
        return token || throwError('Invalid token (missing)');
    },
    notExpired: function notExpired(token) {
        return (token.content.exp || token.content.expiration) * 1000 > Date.now() || throwError('Invalid token (expired)');
    },
    signed: function signed(token) {
        return token.signed || throwError('Invalid token (not signed)');
    },
    validAction: function validAction(token, action) {
        return token.content.action === action || throwError('Invalid token (wrong action)');
    },
    validResource: function validResource(token, resource) {
        return token.content.resource === resource || throwError('Invalid token (wrong resource)');
    },
    validSignature: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(token, grantManager) {
            var verify, key;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            verify = crypto.createVerify('RSA-SHA256');

                            if (!grantManager.publicKey) {
                                _context.next = 6;
                                break;
                            }

                            verify.update(token.signed);
                            if (!verify.verify(grantManager.publicKey, token.signature, 'base64')) {
                                throwError('Invalid token (signature)');
                            }
                            _context.next = 11;
                            break;

                        case 6:
                            _context.next = 8;
                            return grantManager.rotation.getJWK(token.header.kid);

                        case 8:
                            key = _context.sent;

                            verify.update(token.signed);
                            if (!verify.verify(key, token.signature)) {
                                throwError('Invalid token (signature)');
                            }

                        case 11:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined);
        }));

        return function validSignature(_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }()
};

var ActionTokenVerifier = function () {
    function ActionTokenVerifier(grantManager) {
        (0, _classCallCheck3.default)(this, ActionTokenVerifier);

        this.grantManager = grantManager;
    }

    (0, _createClass3.default)(ActionTokenVerifier, [{
        key: 'verify',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(token, _ref3) {
                var action = _ref3.action,
                    resource = _ref3.resource;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                tokenRules.exists(token);
                                tokenRules.notExpired(token);
                                tokenRules.signed(token);
                                tokenRules.validAction(token, action);
                                tokenRules.validResource(token, resource);
                                _context2.next = 7;
                                return tokenRules.validSignature(token, this.grantManager);

                            case 7:
                                return _context2.abrupt('return', token);

                            case 8:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function verify(_x3, _x4) {
                return _ref2.apply(this, arguments);
            }

            return verify;
        }()
    }]);
    return ActionTokenVerifier;
}();

var SessionGrantStore = function () {
    function SessionGrantStore() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        (0, _classCallCheck3.default)(this, SessionGrantStore);

        this.options = (0, _assign2.default)({
            key: 'kc_auth_grant'
        }, options);
        this.name = 'session';
    }

    (0, _createClass3.default)(SessionGrantStore, [{
        key: 'canRetrieveGrantFrom',
        value: function canRetrieveGrantFrom(request) {
            return !!this.getGrant(request);
        }
    }, {
        key: 'getGrant',
        value: function getGrant(request) {
            return request.yar.get(this.options.key);
        }
    }, {
        key: 'saveGrant',
        value: function saveGrant(request, grant) {
            request.yar.set(this.options.key, grant);
        }
    }, {
        key: 'clearGrant',
        value: function clearGrant(request) {
            request.yar.reset();
        }
    }]);
    return SessionGrantStore;
}();

var BearerGrantStore = function () {
    function BearerGrantStore() {
        (0, _classCallCheck3.default)(this, BearerGrantStore);

        this.name = 'bearer';
    }

    (0, _createClass3.default)(BearerGrantStore, [{
        key: 'canRetrieveGrantFrom',
        value: function canRetrieveGrantFrom(request) {
            var header = request.headers.authorization;
            if (!header) {
                return false;
            }
            return header.indexOf('bearer ') === 0 || header.indexOf('Bearer ') === 0;
        }
    }, {
        key: 'getGrant',
        value: function getGrant(request) {
            if (!this.canRetrieveGrantFrom(request)) {
                return null;
            }
            var accessToken = request.headers.authorization.substring('bearer '.length);
            return {
                access_token: accessToken
            };
        }
    }]);
    return BearerGrantStore;
}();

var NoGrantStore = function () {
    function NoGrantStore() {
        (0, _classCallCheck3.default)(this, NoGrantStore);
    }

    (0, _createClass3.default)(NoGrantStore, [{
        key: 'canRetrieveGrantFrom',
        value: function canRetrieveGrantFrom() {
            return true;
        }
    }, {
        key: 'getGrant',
        value: function getGrant() {
            return null;
        }
    }]);
    return NoGrantStore;
}();

var DelegatingGrantStore = function () {
    function DelegatingGrantStore(innerGrantStore, serializer) {
        (0, _classCallCheck3.default)(this, DelegatingGrantStore);

        this.innerGrantStore = innerGrantStore;
        this.serializer = serializer;
    }

    (0, _createClass3.default)(DelegatingGrantStore, [{
        key: 'canRetrieveGrantFrom',
        value: function canRetrieveGrantFrom(request) {
            return this.innerGrantStore.canRetrieveGrantFrom(request);
        }
    }, {
        key: 'getGrant',
        value: function getGrant(request) {
            var grant = this.innerGrantStore.getGrant(request);
            return grant ? this.serializer.deserialize(grant) : null;
        }
    }, {
        key: 'saveGrant',
        value: function saveGrant(request, grant) {
            if (!this.innerGrantStore.saveGrant) {
                return;
            }
            var grantData = this.serializer.serialize(grant);
            this.innerGrantStore.saveGrant(request, grantData);
        }
    }, {
        key: 'clearGrant',
        value: function clearGrant(request) {
            if (this.innerGrantStore.clearGrant) {
                this.innerGrantStore.clearGrant(request);
            }
        }
    }]);
    return DelegatingGrantStore;
}();

var GrantSerializer = function () {
    function GrantSerializer(clientId) {
        (0, _classCallCheck3.default)(this, GrantSerializer);

        this.clientId = clientId;
    }

    (0, _createClass3.default)(GrantSerializer, [{
        key: 'serialize',
        value: function serialize(grant) {
            if (!grant) {
                return null;
            }
            return {
                access_token: grant.access_token ? grant.access_token.token : undefined,
                refresh_token: grant.refresh_token ? grant.refresh_token.token : undefined,
                id_token: grant.id_token ? grant.id_token.token : undefined,
                expires_in: grant.expires_in,
                token_type: grant.token_type
            };
        }
    }, {
        key: 'deserialize',
        value: function deserialize(grantData) {
            if (!grantData) {
                return null;
            }
            return new Grant({
                access_token: grantData.access_token ? new Token(grantData.access_token, this.clientId) : undefined,
                refresh_token: grantData.refresh_token ? new Token(grantData.refresh_token, this.clientId) : undefined,
                id_token: grantData.id_token ? new Token(grantData.id_token, this.clientId) : undefined,
                expires_in: grantData.expires_in,
                token_type: grantData.token_type,
                __raw: grantData
            });
        }
    }]);
    return GrantSerializer;
}();

var createPrincipalResource = function createPrincipalResource(principal) {
    if (!principal) {
        return principal;
    }
    var name = principal.name,
        scope = principal.scope,
        accessToken = principal.accessToken,
        idToken = principal.idToken;

    var formattedPrincipal = {
        name: name,
        scope: scope,
        accessToken: {
            value: accessToken.token,
            content: accessToken.content
        }
    };
    if (idToken) {
        formattedPrincipal.idToken = {
            value: idToken.token,
            content: idToken.content
        };
    }
    return formattedPrincipal;
};

var defaultPrincipalConversion = function defaultPrincipalConversion(principal) {
    return principal;
};
var defaultShouldRedirectUnauthenticated = function defaultShouldRedirectUnauthenticated(config) {
    return function (request) {
        return !(config.bearerOnly || request.auth.mode !== 'required' || request.raw.req.url.startsWith('/api/') || request.headers['x-requested-with'] === 'XMLHttpRequest');
    };
};

var hapi17ReplyStrategy = function hapi17ReplyStrategy(reply) {
    return {
        authenticated: function authenticated(options) {
            return reply.authenticated(options);
        },
        representation: function representation(obj) {
            return obj;
        }
    };
};

var hapi16ReplyStrategy = function hapi16ReplyStrategy(reply) {
    return {
        authenticated: function authenticated(options) {
            return reply.continue(options);
        },
        representation: function representation(obj) {
            return reply(obj);
        }
    };
};

var KeycloakAdapter = function () {
    function KeycloakAdapter(server, config) {
        (0, _classCallCheck3.default)(this, KeycloakAdapter);

        this.server = server;
        this.config = (0, _assign2.default)({
            loginUrl: '/sso/login',
            logoutUrl: '/sso/logout',
            principalUrl: '/api/principal',
            corsOrigin: ['*'],
            principalConversion: defaultPrincipalConversion,
            principalNameAttribute: 'name',
            shouldRedirectUnauthenticated: defaultShouldRedirectUnauthenticated(config)
        }, config);
        if (!this.config.secret) {
            this.config.secret = this.config.clientSecret;
        }
        this.keycloakConfig = new KeycloakConfig(this.config);
        this.grantManager = new GrantManager(this.keycloakConfig);
        this.actionTokenVerifier = new ActionTokenVerifier(this.grantManager);
        this.grantSerializer = new GrantSerializer(this.config.clientId);
        this.grantStores = this.createGrantStores(this.config.bearerOnly);
        this.replyStrategy = server.version < '17' ? hapi16ReplyStrategy : hapi17ReplyStrategy;
    }

    (0, _createClass3.default)(KeycloakAdapter, [{
        key: 'createGrantStores',
        value: function createGrantStores(bearerOnly) {
            var stores = [];
            stores.push(new BearerGrantStore());
            if (!bearerOnly) {
                stores.push(new SessionGrantStore());
            }
            stores.push(new NoGrantStore());
            return stores;
        }
    }, {
        key: 'obtainGrantFromCode',
        value: function obtainGrantFromCode(code, redirectUri, sessionId, sessionHost) {
            var req = {
                session: { auth_redirect_uri: redirectUri }
            };
            return this.grantManager.obtainFromCode(req, code, sessionId, sessionHost);
        }
    }, {
        key: 'getLoginUrl',
        value: function getLoginUrl(redirectUrl) {
            var stateUuid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return this.keycloakConfig.realmUrl + '/protocol/openid-connect/auth' + '?client_id=' + encodeURIComponent(this.keycloakConfig.clientId) + '&state=' + encodeURIComponent(stateUuid || UUID()) + '&redirect_uri=' + encodeURIComponent(redirectUrl) + '&scope=openid' + '&response_type=code';
        }
    }, {
        key: 'getLogoutUrl',
        value: function getLogoutUrl(_ref4) {
            var redirectUrl = _ref4.redirectUrl,
                idTokenHint = _ref4.idTokenHint;

            return urljoin(this.keycloakConfig.realmUrl, '/protocol/openid-connect/logout', redirectUrl ? '?redirect_uri=' + encodeURIComponent(redirectUrl) : '', idTokenHint ? '?id_token_hint=' + encodeURIComponent(idTokenHint) : '');
        }
    }, {
        key: 'getChangePasswordUrl',
        value: function getChangePasswordUrl() {
            return urljoin(this.keycloakConfig.realmUrl, '/account/password', '?referrer=' + encodeURIComponent(this.keycloakConfig.clientId));
        }
    }, {
        key: 'getAccountUrl',
        value: function getAccountUrl() {
            return urljoin(this.keycloakConfig.realmUrl, '/account', '?referrer=' + encodeURIComponent(this.keycloakConfig.clientId));
        }
    }, {
        key: 'getBaseUrl',
        value: function getBaseUrl(request) {
            var base = this.config.baseUrl || urljoin(getProtocol(request) + '://' + getHost(request), this.config.basePath || '');
            return urljoin(base, this.server.realm.modifiers.route.prefix || '');
        }
    }, {
        key: 'getLoginRedirectUrl',
        value: function getLoginRedirectUrl(request) {
            return urljoin(this.getBaseUrl(request), this.config.loginUrl, '?auth_callback=1');
        }
    }, {
        key: 'getAssignedRoles',
        value: function getAssignedRoles(accessToken) {
            var appRoles = _.get(accessToken, 'content.resource_access[\'' + this.keycloakConfig.clientId + '\'].roles', []);
            var realmRoles = _.get(accessToken, 'content.realm_access.roles', []);
            return _.union(appRoles, realmRoles);
        }
    }, {
        key: 'getGrantStoreFor',
        value: function getGrantStoreFor(request) {
            var grantStore = _.find(this.grantStores, function (store) {
                return store.canRetrieveGrantFrom(request);
            });
            return new DelegatingGrantStore(grantStore, this.grantSerializer);
        }
    }, {
        key: 'getGrantStoreByName',
        value: function getGrantStoreByName(name) {
            var grantStore = _.find(this.grantStores, function (store) {
                return store.name === name;
            });
            return new DelegatingGrantStore(grantStore, this.grantSerializer);
        }
    }, {
        key: 'authenticate',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(request, reply) {
                var log, grantStore, existingGrant, grant;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                log = this.server.log.bind(this.server);
                                grantStore = this.getGrantStoreFor(request);
                                existingGrant = grantStore.getGrant(request);

                                if (existingGrant) {
                                    _context3.next = 6;
                                    break;
                                }

                                log(['debug', 'keycloak'], 'No authorization grant received.');
                                return _context3.abrupt('return', null);

                            case 6:
                                _context3.prev = 6;
                                grant = existingGrant;

                                if (!this.grantManager.isGrantRefreshable(grant)) {
                                    _context3.next = 20;
                                    break;
                                }

                                _context3.next = 11;
                                return this.grantManager.ensureFreshness(grant);

                            case 11:
                                grant = _context3.sent;

                                if (!(grant !== existingGrant)) {
                                    _context3.next = 18;
                                    break;
                                }

                                log(['debug', 'keycloak'], 'Access token has been refreshed: ' + grant);
                                _context3.next = 16;
                                return this.grantManager.validateGrant(grant);

                            case 16:
                                grant = _context3.sent;

                                grantStore.saveGrant(request, grant);

                            case 18:
                                _context3.next = 23;
                                break;

                            case 20:
                                _context3.next = 22;
                                return this.grantManager.validateGrant(grant);

                            case 22:
                                grant = _context3.sent;

                            case 23:
                                return _context3.abrupt('return', this.getPrincipal(grant));

                            case 26:
                                _context3.prev = 26;
                                _context3.t0 = _context3['catch'](6);

                                log(['warn', 'keycloak'], 'Authorization has failed - Received grant is invalid: ' + _context3.t0 + '.');
                                grantStore.clearGrant(request);
                                return _context3.abrupt('return', null);

                            case 31:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[6, 26]]);
            }));

            function authenticate(_x7, _x8) {
                return _ref5.apply(this, arguments);
            }

            return authenticate;
        }()
    }, {
        key: 'answer',
        value: function answer(reply) {
            return this.replyStrategy(reply);
        }
    }, {
        key: 'getAuthScheme',
        value: function getAuthScheme() {
            var _this = this;

            var keycloak = this;
            return function (server, options) {
                return {
                    authenticate: function () {
                        var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(request, reply) {
                            var credentials, loginUrl;
                            return _regenerator2.default.wrap(function _callee4$(_context4) {
                                while (1) {
                                    switch (_context4.prev = _context4.next) {
                                        case 0:
                                            _context4.next = 2;
                                            return keycloak.authenticate(request, reply);

                                        case 2:
                                            credentials = _context4.sent;

                                            server.log(['debug', 'keycloak'], 'Authentication request. URL: ' + request.raw.req.url + ', user: ' + (credentials ? credentials.name : '[Anonymous]'));

                                            if (!credentials) {
                                                _context4.next = 8;
                                                break;
                                            }

                                            return _context4.abrupt('return', keycloak.answer(reply).authenticated({ credentials: credentials }));

                                        case 8:
                                            if (!keycloak.config.shouldRedirectUnauthenticated(request)) {
                                                _context4.next = 14;
                                                break;
                                            }

                                            loginUrl = keycloak.getLoginUrl(keycloak.getLoginRedirectUrl(request));

                                            server.log(['debug', 'keycloak'], 'User is not authenticated - redirecting to ' + loginUrl);
                                            return _context4.abrupt('return', reply.response().takeover().redirect(loginUrl));

                                        case 14:
                                            return _context4.abrupt('return', keycloak.answer(reply).representation(Boom.unauthorized('The resource owner is not authenticated.', 'bearer', { realm: keycloak.config.realm })));

                                        case 15:
                                        case 'end':
                                            return _context4.stop();
                                    }
                                }
                            }, _callee4, _this);
                        }));

                        return function authenticate(_x9, _x10) {
                            return _ref6.apply(this, arguments);
                        };
                    }()
                };
            };
        }
    }, {
        key: 'getPrincipal',
        value: function getPrincipal(grant) {
            return {
                name: this.getPrincipalName(grant),
                scope: this.getAssignedRoles(grant.access_token),
                idToken: grant.id_token,
                accessToken: grant.access_token
            };
        }
    }, {
        key: 'getPrincipalName',
        value: function getPrincipalName(grant) {
            var principalNameAttribute = this.config.principalNameAttribute;
            var principalName = void 0;
            if (grant.id_token && grant.id_token.content[principalNameAttribute]) {
                principalName = grant.id_token.content[principalNameAttribute];
            } else if (grant.access_token.content[principalNameAttribute]) {
                principalName = grant.access_token.content[principalNameAttribute];
            } else {
                this.server.log(['warn', 'keycloak'], 'Neither ID token nor access token contains \'' + principalNameAttribute + '\' attribute. Using \'sub\' instead.');
                principalName = grant.access_token.content.sub;
            }
            return principalName;
        }
    }, {
        key: 'register',
        value: function register() {
            this.server.auth.scheme('keycloak', this.getAuthScheme.bind(this)());
            if (!this.config.bearerOnly) {
                registerLoginRoute(this);
                registerLogoutRoute(this);
                registerBackChannelLogoutRoute(this);
            }
            if (this.config.principalUrl) {
                registerPrincipalRoute(this);
            }
        }
    }]);
    return KeycloakAdapter;
}();

var registerPrincipalRoute = function registerPrincipalRoute(keycloak) {
    keycloak.server.route({
        path: keycloak.config.principalUrl,
        method: 'GET',
        handler: function handler(request, reply) {
            // eslint-disable-line
            var principal = createPrincipalResource(request.auth.credentials);
            if (principal && !keycloak.config.bearerOnly) {
                principal = (0, _assign2.default)({}, principal, {
                    accountUrl: keycloak.getAccountUrl(),
                    changePasswordUrl: keycloak.getChangePasswordUrl(),
                    logoutUrl: urljoin(keycloak.getBaseUrl(request), keycloak.config.logoutUrl),
                    loginUrl: urljoin(keycloak.getBaseUrl(request), keycloak.config.loginUrl)
                });
            }
            if (keycloak.config.principalConversion) {
                principal = keycloak.config.principalConversion(principal);
            }
            return keycloak.answer(reply).representation(principal || Boom.unauthorized('The user is not authenticated'));
        }
    });
};

var registerLoginRoute = function registerLoginRoute(keycloak) {
    var log = keycloak.server.log.bind(keycloak.server);
    keycloak.server.route({
        path: keycloak.config.loginUrl,
        method: 'GET',
        handler: function () {
            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(request, reply) {
                var grantStore, redirectUrl, loginUrl, errorMessage, grant, _errorMessage;

                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                grantStore = keycloak.getGrantStoreByName('session');

                                if (!grantStore.canRetrieveGrantFrom(request)) {
                                    _context5.next = 3;
                                    break;
                                }

                                return _context5.abrupt('return', reply.redirect(keycloak.getBaseUrl(request)));

                            case 3:
                                redirectUrl = keycloak.getLoginRedirectUrl(request);

                                if (request.query.auth_callback) {
                                    _context5.next = 10;
                                    break;
                                }

                                loginUrl = keycloak.getLoginUrl(redirectUrl);

                                log(['debug', 'keycloak'], 'User is not authenticated - redirecting to ' + loginUrl);
                                return _context5.abrupt('return', reply.redirect(loginUrl));

                            case 10:
                                log(['debug', 'keycloak'], 'Processing Keycloak callback after redirection to ' + request.raw.req.url);

                                if (!request.query.error) {
                                    _context5.next = 15;
                                    break;
                                }

                                errorMessage = 'Unable to authenticate - ' + request.query.error + '. ' + (request.query.error_description || '');

                                log(['error', 'keycloak'], errorMessage);
                                return _context5.abrupt('return', keycloak.answer(reply).representation(Boom.forbidden(errorMessage)));

                            case 15:
                                _context5.prev = 15;

                                log(['debug', 'keycloak'], 'Processing authorization code');
                                _context5.next = 19;
                                return keycloak.obtainGrantFromCode(request.query.code, redirectUrl, request.yar.id, keycloak.getBaseUrl(request));

                            case 19:
                                grant = _context5.sent;

                                grantStore.saveGrant(request, grant);
                                log(['debug', 'keycloak'], 'Access token has been successfully obtained from the authorization code:\n' + grant);
                                return _context5.abrupt('return', reply.redirect(keycloak.getBaseUrl(request)));

                            case 25:
                                _context5.prev = 25;
                                _context5.t0 = _context5['catch'](15);
                                _errorMessage = 'Unable to authenticate - could not obtain grant code. ' + _context5.t0;

                                log(['error', 'keycloak'], _errorMessage);
                                return _context5.abrupt('return', keycloak.answer(reply).representation(Boom.forbidden(_errorMessage)));

                            case 30:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, undefined, [[15, 25]]);
            }));

            return function handler(_x11, _x12) {
                return _ref7.apply(this, arguments);
            };
        }(),
        config: {
            auth: false,
            cors: {
                origin: keycloak.config.corsOrigin
            }
        }
    });
};

var registerBackChannelLogoutRoute = function registerBackChannelLogoutRoute(keycloak) {
    keycloak.server.route({
        path: '/k_logout',
        method: 'POST',
        handler: function () {
            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(request, reply) {
                var logoutToken, message, sessionIds, _message;

                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                keycloak.server.log(['debug', 'keycloak'], 'Back-channel logout');

                                logoutToken = new Token(request.payload);
                                _context6.prev = 2;
                                _context6.next = 5;
                                return keycloak.actionTokenVerifier.verify(logoutToken, {
                                    action: 'LOGOUT',
                                    resource: keycloak.config.clientId
                                });

                            case 5:
                                _context6.next = 12;
                                break;

                            case 7:
                                _context6.prev = 7;
                                _context6.t0 = _context6['catch'](2);
                                message = 'Invalid token has been provided. ' + _context6.t0;

                                keycloak.server.log(['warn', 'keycloak'], message);
                                return _context6.abrupt('return', keycloak.answer(reply).representation(Boom.badRequest(message)));

                            case 12:
                                sessionIds = logoutToken.content.adapterSessionIds || [];
                                _context6.prev = 13;
                                _context6.next = 16;
                                return _promise2.default.all(sessionIds.map(function (sessionId) {
                                    return keycloak.server.yar.revoke(sessionId);
                                }));

                            case 16:
                                _context6.next = 23;
                                break;

                            case 18:
                                _context6.prev = 18;
                                _context6.t1 = _context6['catch'](13);
                                _message = 'An error occurred during dropping sessions. ' + _context6.t1;

                                keycloak.server.log(['warn', 'keycloak'], _message);
                                return _context6.abrupt('return', keycloak.answer(reply).representation(Boom.notImplemented(_message)));

                            case 23:
                                return _context6.abrupt('return', keycloak.answer(reply).representation('Successfully dropped all user\'s sessions.'));

                            case 24:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, undefined, [[2, 7], [13, 18]]);
            }));

            return function handler(_x13, _x14) {
                return _ref8.apply(this, arguments);
            };
        }(),
        config: {
            auth: false
        }
    });
};

var registerLogoutRoute = function registerLogoutRoute(keycloak) {
    keycloak.server.route({
        path: keycloak.config.logoutUrl,
        method: 'GET',
        handler: function handler(request, reply) {
            keycloak.server.log(['debug', 'keycloak'], 'Signing out');
            var grantStore = keycloak.getGrantStoreByName('session');
            grantStore.clearGrant(request);
            var redirectUrl = keycloak.getBaseUrl(request);
            var logoutUrl = keycloak.getLogoutUrl({ redirectUrl: redirectUrl });
            return reply.redirect(logoutUrl);
        },

        config: {
            auth: false,
            cors: {
                origin: keycloak.config.corsOrigin
            }
        }
    });
};

/* This is a plugin registration backward-compatible with Hapijs v14+ */
var register = function register(server, options, next) {
    var adapter = new KeycloakAdapter(server, options);
    adapter.register();
    if (next) {
        next();
    }
};
register.attributes = { pkg: pkg };
module.exports = {
    register: register,
    pkg: pkg,
    KeycloakAdapter: KeycloakAdapter
};